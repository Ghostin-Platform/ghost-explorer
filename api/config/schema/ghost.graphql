### Directives
directive @constraint(
  # String constraints
  minLength: Int
  maxLength: Int
  startsWith: String
  endsWith: String
  notContains: String
  pattern: String
  format: String

  # Number constraints
  min: Int
  max: Int
  exclusiveMin: Int
  exclusiveMax: Int
  multipleOf: Int
) on INPUT_FIELD_DEFINITION

### Scalar
scalar DateTime
scalar ConstraintString
scalar ConstraintNumber
scalar Upload

type BlockChainInfo {
  version: String
  name: String
  connections: Float
  node_version: String
  height: Float
  verification_progress: Float
  sync_height: Float
  sync_percent: Float
  difficulty: Float
  stake_weight: Float
}

type SerieDataPoint {
  date: DateTime
  value: Float
}

type StatPercentile {
  min: Float
  max: Float
  percentile: Float
  size: Int
}

type Block {
  offset: String!
  hash: String!
  difficulty: Int
  confirmations: Int!
}

type ScriptSig {
  asm: String
  hex: String
}
type ScriptPubKey {
  asm: String
  hex: String
  reqSigs: Int
  type: String
  addresses: [String]
}

type TxInStandard {
  txid: String
  scriptSig: ScriptSig
  value: Float
  valueSat: Float
  address: String
  txinwitness: [String]
  sequence: Float
}
type TxInCoinbase {
  coinbase: String
  sequence: Float
}
union TxIn = TxInStandard | TxInCoinbase

type TxOutStandard {
  value: Float
  valueSat: Float
  scriptPubKey: ScriptPubKey
  spentTxId: String
  spentIndex: Int
  spentHeight: Int
}
type TxOutData {
  data_hex: String
  dev_fund_cfwd: Float
  smsgfeerate: Float
  smsgdifficulty: String
}
union TxOut = TxOutStandard | TxOutData

type Transaction {
  offset: String!
  hex: String
  height: Int
  txid: String
  hash: String
  confirmations: Int
  time: DateTime
  blocktime: DateTime
  isReward: Boolean
  isNewCoins: Boolean
  variation: Float
  inSat: Float
  outSat: Float
  vin: [TxIn]
  vout: [TxOut]
}
type Address {
  address: String!
  balance: Float
  totalReceived: Float
  totalSent: Float
  nbTx: Int
  txVariations: [SerieDataPoint]
  rewards: [SerieDataPoint]
  fees: [SerieDataPoint]
  transactions: [Transaction]
}

type Reward {
  date: DateTime
  address: String
  blockHash: String
  valueSat: Float
}

### QUERIES
type Query {
  info: BlockChainInfo
  block(id: String!): Block
  blocks(offset: String! = "+", limit: Int! = 50): [Block]
  rewards(offset: String! = "+", limit: Int! = 50): [Reward]
  transaction(id: String!): Transaction
  transactions(offset: String! = "+", limit: Int! = 50): [Transaction]
  address(id: String!): Address
  difficulty: StatPercentile
  seriesDifficulty: [SerieDataPoint]
  stakeWeight: StatPercentile
  seriesStakeWeight: [SerieDataPoint]
  txActivity: StatPercentile
  seriesTxActivity: [SerieDataPoint]
}
