### Directives
directive @auth(for: [Roles] = [], and: Boolean = false) on OBJECT | FIELD_DEFINITION
directive @constraint(
  # String constraints
  minLength: Int
  maxLength: Int
  startsWith: String
  endsWith: String
  notContains: String
  pattern: String
  format: String

  # Number constraints
  min: Int
  max: Int
  exclusiveMin: Int
  exclusiveMax: Int
  multipleOf: Int
) on INPUT_FIELD_DEFINITION

enum Roles {
  ROOT
  VET
}

### Scalar
scalar DateTime
scalar ConstraintString
scalar ConstraintNumber
scalar Upload

type Me {
  id: ID!
  name: String!
  addressesAlias: String
  balance: Float
  email: String!
  principalAddress: ID
  roles: [Roles]
  addresses: [Address]
}

type MarketInfo {
  usd: Float
  usd_market_cap: Float
  usd_24h_vol: Float
  usd_24h_change: Float
  last_updated_at: DateTime
}

type BlockChainInfo {
  id: ID!
  version: String!
  name: String
  connections: Float
  pooledTxCount: Int
  node_version: String
  height: Float
  timeoffset: Float
  verification_progress: Float
  sync_height: Float
  sync_percent: Float
  sync_index_percent: Float
  difficulty: Float
  stake_weight: Float
  moneysupply: Float
}

type PercentileDataPoint {
  time: Int!
  value: StatPercentile!
}

type TimeDataPoint {
  time: Int!
  value: Float!
}

type DataPoint {
  key: String!
  value: Float!
}

type StatPercentile {
  min: Float
  max: Float
  percentile: Float
  size: Int
}

type Block {
  id: ID!
  hash: String!
  height: Float!
  feeSat: Float
  time: Int
  mediantime: Int
  size: Float
  weight: Float
  nonce: String
  merkleroot: String
  witnessmerkleroot: String
  previousblockhash: String
  nextblockhash: String
  difficulty: Float
  version: Float
  bits: String
  isMainChain: Boolean
  inSat: Float
  outSat: Float
  transferSat: Float
  variation: Float
  txSize: Int
  rewardTx: Transaction
  rewardSat: Float
  confirmations: Int!
  participants: [String]
  transactions(offset: Int! = 0, limit: Int! = 5): [Transaction]
}

type ScriptSig {
  asm: String
  hex: String
}
type ScriptPubKey {
  asm: String
  hex: String
  reqSigs: Int
  type: String
  addresses: [String]
}

type TxInAnon {
  ring_size: Int
  scriptdata: String
  txinwitness: [String]
}
type TxInBlind {
  ring_size: Int
  scriptdata: String
  address: String
  txinwitness: [String]
}
type TxInStandard {
  txid: String
  scriptSig: ScriptSig
  value: Float
  valueSat: Float
  address: String
  txinwitness: [String]
  sequence: Float
}
type TxInCoinbase {
  coinbase: String
  sequence: Float
}
union TxIn = TxInStandard | TxInCoinbase | TxInBlind | TxInAnon

type TxOutAnon {
  pubkey: String
  valueCommitment: String
  data_hex: String
  rangeproof: String
}
type TxOutBlind {
  valueCommitment: String
  scriptPubKey: ScriptPubKey
  data_hex: String
  rangeproof: String
  spentTxId: String
  spentIndex: Int
  spentHeight: Int
}
type TxOutStandard {
  value: Float
  valueSat: Float
  scriptPubKey: ScriptPubKey
  spentTxId: String
  spentIndex: Int
  spentHeight: Int
}
type TxOutData {
  data_hex: String
  ct_fee: Float
  dev_fund_cfwd: Float
  smsgfeerate: Float
  smsgdifficulty: String
}
union TxOut = TxOutStandard | TxOutData | TxOutBlind | TxOutAnon

enum TransactionType {
  coinbase
  reward
  standard
  blind
  anon
  mixed_standard
  mixed_private
}

type VoutAddr {
  address: String!
  resolveAddr: Address
  spentTxId: String
  type: TransactionType
  value: Float
  valueSat: Float
}

type VinAddr {
  address: String!
  resolveAddr: Address
  type: TransactionType
  value: Float
  valueSat: Float
}

type Transaction {
  id: ID!
  txid: String!
  hash: String!
  type: TransactionType
  block: Block
  size: Float
  blocktime: Int
  blockhash: String
  blockheight: Int
  hex: String
  height: Int
  confirmations: Int
  time: Int
  locktime: Int
  variation: Float
  feeSat: Float
  transferSat: Float
  participants: [String]
  # vin
  inSat: Float
  vin: [TxIn]
  vinAddresses: [String]
  vinPerAddresses: [VinAddr]
  vinAddressesSize: Int
  vinSize: Int
  # vout
  outSat: Float
  vout: [TxOut]
  voutAddresses: [String]
  voutPerAddresses: [VoutAddr]
  voutAddressesSize: Int
  voutSize: Int
}
type AddressHistory {
  time: Int
  totalSent: Float
  totalFees: Float
  totalRewarded: Float
  totalReceived: Float
  totalBalance: Float
}

type Address {
  id: ID!
  alias: String
  nbTx: Int
  balance: Float
  time: Int
  totalRewarded: Float
  totalFees: Float
  received: Float
  totalReceived: Float
  rewardSize: Int
  totalSent: Float
  rewardAvgSize: Float
  rewardAvgTime: String
  history: [AddressHistory]
  transactions(offset: Int! = 0, limit: Int! = 5): [Transaction]
}

type Reward {
  date: DateTime
  address: String
  blockHash: String
  blockheight: Int
  valueSat: Float
}

type Veteran {
  id: String!
  alias: String
  balance: Float
  vets: Float
  percent: Float
}

type SearchData {
  addresses: [String]
  blocks: [String]
  transactions: [String]
}

### QUERIES
type Query {
  test: String
  me: Me @auth
  users: [Me] @auth(for: [ROOT])
  info: BlockChainInfo
  market: MarketInfo
  search(term: String!): SearchData
  block(id: String!): Block
  blocks(offset: String! = "+", limit: Int! = 6): [Block]
  veterans: [Veteran]
  transaction(id: String!): Transaction
  transactions(offset: String! = "+", limit: Int! = 10): [Transaction]
  mempool(offset: Int! = 0, limit: Int! = 15): [Transaction]
  address(id: String!): Address
  addressMempool(id: String!): [Transaction]
  rewards: [Reward]
  # Stats
  difficulty: StatPercentile
  seriesDifficulty: [PercentileDataPoint]
  stakeWeight: StatPercentile
  seriesStakeWeight: [PercentileDataPoint]
  seriesTxCount: [TimeDataPoint]
  seriesMonthlyStakers: [TimeDataPoint]
  txTypeVentilation: [DataPoint]
  # Address stat
  seriesAddressBalance(id: String!): [TimeDataPoint]
}

type Mutation {
  login(email: String!, password: String!): Me
  addUser(email: String!, password: String!): [Me] @auth(for: [ROOT])
  deleteUser(email: String!): [Me] @auth(for: [ROOT])
  updateUser(name: String!, addressesAlias: String): Me @auth
  unregisterAddress(address: String!): Me @auth
  registerAddress(address: String!, signature: String!): Me @auth
  logout: Boolean @auth
}
